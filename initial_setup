import subprocess
import wolframalpha
import pyttsx3 #pyttsx3 is a cross-platform text to speech library which is platform independent.
import tkinter as tk #Tkinter is the most commonly used library for developing GUI (Graphical User Interface) in Python.
from tkinter import * # "*" means all the functions and libraries
from tkinter.ttk import * #"ttk" - This will give you the effects of modern graphics. 
import json
import random
import operator
import speech_recognition as sr#To convert speech to text the one and only class we need is the Recognizer class from the speech_recognition module. 
#Depending upon the underlying API used to convert speech to text, the Recognizer class convert our speech to text.
import datetime #used
import wikipedia
import webbrowser
import os
#import winshell
#import pyjokes
#import feedparser
import smtplib
import ctypes
import time
import requests
import shutil
#from twilio.rest import Client
#from clint.textui import progress
#from ecapture import ecapture as ec
from bs4 import BeautifulSoup as bs
import win32com.client as wincl
from urllib.request import urlopen
import multiprocessing


engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id) #0 stands for male voice
def speak(audio):
    engine.say(audio)
    engine.runAndWait()


def takeCommand(usern):
    r = sr.Recognizer()
     
    with sr.Microphone() as source:
         
        print("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source)
  
    try:
        print("Recognizing...")   
        query = r.recognize_google(audio, language ='en-in')
        print(usern, "said -->", query)
  
    except Exception as e:
        print(e)   
        print("Unable to Recognize your voice.") 
        return "None"
    
    return query


def main():



    def Result(user_e, pass_e):
        usern = user_e.get()
        input2 = pass_e.get()
        success = "starting Jarvis..."
        if (usern=="kruthi" and input2 == "ironman46") or (usern == "natasha" and input2 == "explorer67"): #to let know jarvis who's the user
            Message(root, text = success).place(x = 330, y = 200)
            greeting = takeCommand(usern)
            if "good morning" in greeting or "Good morning" in greeting:
                #good morining routine call function
                good_morning(usern)
                pass
            else: # if greeting is hi or hello or anything
                initiate(usern)
                #takeCommand(usern)
                #call your functions here!!!

        else:
            Message(root, text = "Autorisation failed!").place(x = 300, y = 200)


    root = Tk()  #root is the name of the window that opens
    frame = Frame(root).pack()
    root.title("Jarvis Authorisation")
    label = Label(root, text ="Welcome!", font=('calibre',10, 'bold')).pack() #The Pack geometry manager packs widgets in rows or columns.

    root.geometry("400x250") #set size of window

    user_e = tk.StringVar()
    pass_e = tk.StringVar()


    user_name = Label(root, text = "Username").place(x = 40, y = 60)

    user_pass = Label(root, text ="Password").place(x = 40, y = 100)

    user_entry = Entry(root, width = 30, textvariable = user_e).place(x = 110, y = 60)

    pass_entry = Entry(root, width = 30, textvariable = pass_e, show = "*").place(x = 110, y = 100)

    submit_b = Button(root, text ="Submit", command = lambda: Result(user_e, pass_e)).place(x = 160, y = 140) 

    #exit_b = Button(root, text = "Exit", command = root.destroy).place(x = 300, y= 160)#root.destroy is for exitting the window
    root.mainloop()


#weather scrapping:

headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246'}
#The User-Agent (UA) string is contained in the HTTP headers and is intended to identify devices requesting online content. 
# The User-Agent tells the server what the visiting device is (among many other things) and this information can be used to determine what content to return. 
# Of course this requires using a device detection solution which translates UAs into understandable software and hardware information.
url = 'https://www.bbc.com/weather/1277333'
response = requests.get(url)
soup = bs(response.text, 'html.parser')

result1 = soup.find('div', {"class":"wr-day__weather-type-description wr-js-day-content-weather-type-description wr-day__content__weather-type-description--opaque", "style":"display:block"})
atmos = result1.text.strip()
#print(atmos) #success!!!!

result2 = soup.find("div", {"class":"wr-value--temperature gel-trafalgar"}).find("span", {"class":"wr-hide-visually"})
temp = result2.text.strip()
#print(temp) #success!!!!

atmos_s = "Today there is " + atmos
temp_s = "and the temperature is" + temp + "Celsius"



engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id) #0 stands for male voice
def speak(audio):
    engine.say(audio)
    engine.runAndWait()



def takeCommand(usern):
    r = sr.Recognizer()
     
    with sr.Microphone() as source:
         
        print("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source)
  
    try:
        print("Recognizing...")   
        query = r.recognize_google(audio, language ='en-in')
        print(usern, "said -->", query)
  
    except Exception as e:
        print(e)   
        print("Unable to Recognize your voice.") 
        return "None"
    
    return query


def greet(usern):
    hour = int(datetime.datetime.now().hour) #takes the current hr value
    minutes = int(datetime.datetime.now().minute)
    hr = str(hour)
    m = str(minutes)
    time = "its" + hr + " " + m
    if hour>= 0 and hour<12:
        speak("Good Morning!")
        speak(usern)
        speak(time)
        speak("AM")
    elif hour>= 12 and hour<18:
        speak("Good Afternoon!") 
        speak(usern)
        speak(time)
        speak("PM")
    else:
        speak("Good Evening!")
        speak(usern)
        speak(time)
        speak("PM")
    
def weather():
    try:
        try:
            speak(atmos_s)
            speak(temp_s) 
        except Exception:
            try:
                speak(atmos_s)
            except Exception:
                speak(temp_s)
        speak("in Bengaluru")
    except Exception as e:
        print(e)
        speak("I\'m unable to analyze the weather currently!")

def news():
    
    url='https://www.bbc.com/news' # any news portal ,in this case 'BBC'
    response = requests.get(url) # accesing url and creating an object

    soup = bs(response.text, 'html.parser') # pulling HTTP data from the internet
    headlines = soup.find_all('h3') # iterates through object(response) and printing it as a string

    hed = headlines[0:10] # printing the top 10 headlines
    
    for x in hed:
        req = x.text.strip()
        print(req)#printing stripped data
        speak(req)
        
def news_speak():
    try:
        speak("here's the latest news")
        news()
        
    except Exception as e:
        print(e)
        speak("Sorry, I am not able to read the news right now")


def to_do():
    speak("")



def good_morning(usern):
    greet(usern)
    weather()
    news_speak()
    speak("Make a great day!")
    speak(usern)


def initiate(usern):
    hour = int(datetime.datetime.now().hour) #takes the current hr value
    if hour>= 0 and hour<12:
        speak("Good Morning!")
        speak(usern)
    elif hour>= 12 and hour<18:
        speak("Good Afternoon!") 
        speak(usern) 
    else:
        speak("Good Evening!")
        speak(usern) 
    
    speak("I am Jarvis, your personal Assistant under construction")
    speak("how can I help?")         
          
    


        
           





        








main()